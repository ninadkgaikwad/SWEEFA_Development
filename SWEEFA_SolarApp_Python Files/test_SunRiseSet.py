import unittest
import SunRiseSet

class TestSunRiseSet(unittest.TestCase):

    def setUp(self):
        self.SunRiseSet_Input = {
            'L': 10
        }
        pass

    def test_forRealValues(self):
        expectedAns = {
            'SunRise': [5.94132526560987, 5.92955970548994, 5.91776842151434, 5.90594407345579, 5.89407925474574, 5.88216647370847, 5.87019813437614, 5.85816651677887, 5.8460637565988, 5.83388182407164],
            'SunSet': [18.0586747343901, 18.0704402945101, 18.0822315784857, 18.0940559265442, 18.1059207452543, 18.1178335262915, 18.1298018656239, 18.1418334832211, 18.1539362434012, 18.1661181759284],
            'Indicator': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }

        expectedAns2 = [[5.94132526560987, 5.92955970548994, 5.91776842151434, 5.90594407345579, 5.89407925474574, 5.88216647370847, 5.87019813437614, 5.85816651677887, 5.8460637565988, 5.83388182407164], [18.0586747343901, 18.0704402945101, 18.0822315784857, 18.0940559265442, 18.1059207452543, 18.1178335262915, 18.1298018656239, 18.1418334832211, 18.1539362434012, 18.1661181759284], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

        self.SunRiseSet_Input['dec'] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        
        ans = SunRiseSet.SunRiseSet(self.SunRiseSet_Input)
        
        for (i1, j1), (i2, j2) in zip(ans.items(), expectedAns.items()):
            for itr in range(len(j1)):
                self.assertAlmostEqual(j1[itr], j2[itr])

    def test_forImgValues(self):
        expectedAns = {
            'SunRise': [complex(5.94126846252173, 5.49216739279901e-20), complex(5.92959394555092, -9.15551334639084e-05), complex(5.91789394525889, -0.000183256154183409), complex(5.90616134947284, -0.00027524952742553), complex(5.8943889820399, -0.000367682878813527), complex(5.88256958530281, -0.000460705585391355), complex(5.87069580218897, -0.00055446937990094), complex(5.85876015781881, -0.000649128972928068), complex(5.84675504053531, -0.000744842697794206), complex(5.83467268225159, -0.000841773183355963)],
            'SunSet': [complex(18.0587315374783, -5.49216739279901e-20), complex(18.0704060544491, 9.15551334639084e-05), complex(18.0821060547411, 0.000183256154183409), complex(18.0938386505272, 0.00027524952742553), complex(18.1056110179601, 0.000367682878813527), complex(18.1174304146972, 0.000460705585391355), complex(18.129304197811, 0.00055446937990094), complex(18.1412398421812, 0.000649128972928068), complex(18.1532449594647, 0.000744842697794206), complex(18.1653273177484, 0.000841773183355963)],
            'Indicator': [-1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        }

        expectedAns2 = [[complex(5.94126846252173, 5.49216739279901e-20), complex(5.92959394555092, -9.15551334639084e-05), complex(5.91789394525889, -0.000183256154183409), complex(5.90616134947284, -0.00027524952742553), complex(5.8943889820399, -0.000367682878813527), complex(5.88256958530281, -0.000460705585391355), complex(5.87069580218897, -0.00055446937990094), complex(5.85876015781881, -0.000649128972928068), complex(5.84675504053531, -0.000744842697794206), complex(5.83467268225159, -0.000841773183355963)], [complex(18.0587315374783, -5.49216739279901e-20), complex(18.0704060544491, 9.15551334639084e-05), complex(18.0821060547411, 0.000183256154183409), complex(18.0938386505272, 0.00027524952742553), complex(18.1056110179601, 0.000367682878813527), complex(18.1174304146972, 0.000460705585391355), complex(18.129304197811, 0.00055446937990094), complex(18.1412398421812, 0.000649128972928068), complex(18.1532449594647, 0.000744842697794206), complex(18.1653273177484, 0.000841773183355963)], [-1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
        
        self.SunRiseSet_Input['dec'] = [complex(0, 5), complex(1, 5), complex(2, 5), complex(3, 5), complex(4, 5), complex(5, 5), complex(6, 5), complex(7, 5), complex(8, 5), complex(9, 5)]

        ans = SunRiseSet.SunRiseSet(self.SunRiseSet_Input)
        for (i1, j1), (i2, j2) in zip(ans.items(), expectedAns.items()):
            for itr in range(len(j1)):
                self.assertAlmostEqual(j1[itr], j2[itr])

if __name__ == '__main__':
    unittest.main()